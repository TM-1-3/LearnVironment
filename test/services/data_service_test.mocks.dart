// Mocks generated by Mockito 5.4.6 from annotations
// in learnvironment/test/services/data_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:firebase_messaging/firebase_messaging.dart' as _i10;
import 'package:learnvironment/data/assignment_data.dart' as _i5;
import 'package:learnvironment/data/game_data.dart' as _i3;
import 'package:learnvironment/data/game_result_data.dart' as _i8;
import 'package:learnvironment/data/subject_data.dart' as _i4;
import 'package:learnvironment/data/user_data.dart' as _i2;
import 'package:learnvironment/services/cache/assignment_cache_service.dart'
    as _i14;
import 'package:learnvironment/services/cache/game_cache_service.dart' as _i12;
import 'package:learnvironment/services/cache/subject_cache_service.dart'
    as _i13;
import 'package:learnvironment/services/cache/user_cache_service.dart' as _i11;
import 'package:learnvironment/services/firebase/firestore_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserData_0 extends _i1.SmartFake implements _i2.UserData {
  _FakeUserData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGameData_1 extends _i1.SmartFake implements _i3.GameData {
  _FakeGameData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubjectData_2 extends _i1.SmartFake implements _i4.SubjectData {
  _FakeSubjectData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssignmentData_3 extends _i1.SmartFake
    implements _i5.AssignmentData {
  _FakeAssignmentData_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i6.FirestoreService {
  @override
  _i7.Future<void> updateUserGamesPlayed({
    required String? uid,
    required String? gameId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserGamesPlayed,
          [],
          {
            #uid: uid,
            #gameId: gameId,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.UserData> fetchUserData({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserData,
          [],
          {#userId: userId},
        ),
        returnValue: _i7.Future<_i2.UserData>.value(_FakeUserData_0(
          this,
          Invocation.method(
            #fetchUserData,
            [],
            {#userId: userId},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.UserData>.value(_FakeUserData_0(
          this,
          Invocation.method(
            #fetchUserData,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i7.Future<_i2.UserData>);

  @override
  _i7.Future<bool> checkIfUsernameAlreadyExists(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfUsernameAlreadyExists,
          [username],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<String?> getUserIdByUserName(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserIdByUserName,
          [username],
        ),
        returnValue: _i7.Future<String?>.value(),
        returnValueForMissingStub: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<String?> fetchUserType({required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserType,
          [],
          {#uid: uid},
        ),
        returnValue: _i7.Future<String?>.value(),
        returnValueForMissingStub: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> setUserInfo({
    required String? uid,
    required String? name,
    required String? username,
    required String? selectedAccountType,
    required String? email,
    required String? birthDate,
    required String? img,
    List<String>? stClasses,
    List<String>? tClasses,
    List<String>? gamesPlayed,
    List<String>? myGames,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserInfo,
          [],
          {
            #uid: uid,
            #name: name,
            #username: username,
            #selectedAccountType: selectedAccountType,
            #email: email,
            #birthDate: birthDate,
            #img: img,
            #stClasses: stClasses,
            #tClasses: tClasses,
            #gamesPlayed: gamesPlayed,
            #myGames: myGames,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteAccount({required String? uid}) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [],
          {#uid: uid},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getAllGames() => (super.noSuchMethod(
        Invocation.method(
          #getAllGames,
          [],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<void> createGame({
    required String? uid,
    required _i3.GameData? game,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGame,
          [],
          {
            #uid: uid,
            #game: game,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getMyGames({required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyGames,
          [],
          {#uid: uid},
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getPlayedGames(
          {required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayedGames,
          [],
          {#uid: uid},
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<_i3.GameData> fetchGameData({required String? gameId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchGameData,
          [],
          {#gameId: gameId},
        ),
        returnValue: _i7.Future<_i3.GameData>.value(_FakeGameData_1(
          this,
          Invocation.method(
            #fetchGameData,
            [],
            {#gameId: gameId},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.GameData>.value(_FakeGameData_1(
          this,
          Invocation.method(
            #fetchGameData,
            [],
            {#gameId: gameId},
          ),
        )),
      ) as _i7.Future<_i3.GameData>);

  @override
  _i7.Future<void> recordGameResult(_i8.GameResultData? result) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordGameResult,
          [result],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateGamePublicStatus({
    required String? gameId,
    required bool? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGamePublicStatus,
          [],
          {
            #gameId: gameId,
            #status: status,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getAllSubjects(
          {required String? teacherId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSubjects,
          [],
          {#teacherId: teacherId},
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<_i4.SubjectData> fetchSubjectData({required String? subjectId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSubjectData,
          [],
          {#subjectId: subjectId},
        ),
        returnValue: _i7.Future<_i4.SubjectData>.value(_FakeSubjectData_2(
          this,
          Invocation.method(
            #fetchSubjectData,
            [],
            {#subjectId: subjectId},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.SubjectData>.value(_FakeSubjectData_2(
          this,
          Invocation.method(
            #fetchSubjectData,
            [],
            {#subjectId: subjectId},
          ),
        )),
      ) as _i7.Future<_i4.SubjectData>);

  @override
  _i7.Future<bool> checkIfStudentAlreadyInClass({
    required String? subjectId,
    required String? studentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfStudentAlreadyInClass,
          [],
          {
            #subjectId: subjectId,
            #studentId: studentId,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> addSubjectData({
    required _i4.SubjectData? subject,
    required String? uid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSubjectData,
          [],
          {
            #subject: subject,
            #uid: uid,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteSubject({
    required String? subjectId,
    required String? uid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubject,
          [],
          {
            #subjectId: subjectId,
            #uid: uid,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addStudentToSubject({
    required String? subjectId,
    required String? studentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStudentToSubject,
          [],
          {
            #subjectId: subjectId,
            #studentId: studentId,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeStudentFromSubject({
    required String? subjectId,
    required String? studentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeStudentFromSubject,
          [],
          {
            #subjectId: subjectId,
            #studentId: studentId,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateStudentCount({
    required _i8.GameResultData? gameResultData,
    required _i4.SubjectData? subjectData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStudentCount,
          [],
          {
            #gameResultData: gameResultData,
            #subjectData: subjectData,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String> createAssignment({
    required String? title,
    required String? gameId,
    required String? turma,
    required String? dueDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAssignment,
          [],
          {
            #title: title,
            #gameId: gameId,
            #turma: turma,
            #dueDate: dueDate,
          },
        ),
        returnValue: _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #createAssignment,
            [],
            {
              #title: title,
              #gameId: gameId,
              #turma: turma,
              #dueDate: dueDate,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #createAssignment,
            [],
            {
              #title: title,
              #gameId: gameId,
              #turma: turma,
              #dueDate: dueDate,
            },
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i5.AssignmentData> fetchAssignmentData(
          {required String? assignmentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAssignmentData,
          [],
          {#assignmentId: assignmentId},
        ),
        returnValue: _i7.Future<_i5.AssignmentData>.value(_FakeAssignmentData_3(
          this,
          Invocation.method(
            #fetchAssignmentData,
            [],
            {#assignmentId: assignmentId},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.AssignmentData>.value(_FakeAssignmentData_3(
          this,
          Invocation.method(
            #fetchAssignmentData,
            [],
            {#assignmentId: assignmentId},
          ),
        )),
      ) as _i7.Future<_i5.AssignmentData>);

  @override
  _i7.Future<void> deleteAssignment({
    required String? assignmentId,
    required String? uid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAssignment,
          [],
          {
            #assignmentId: assignmentId,
            #uid: uid,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getAllAssignments() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAssignments,
          [],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<List<_i10.RemoteMessage>> fetchNotifications(
          {required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotifications,
          [],
          {#uid: uid},
        ),
        returnValue:
            _i7.Future<List<_i10.RemoteMessage>>.value(<_i10.RemoteMessage>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i10.RemoteMessage>>.value(<_i10.RemoteMessage>[]),
      ) as _i7.Future<List<_i10.RemoteMessage>>);
}

/// A class which mocks [UserCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCacheService extends _i1.Mock implements _i11.UserCacheService {
  @override
  _i7.Future<void> cacheUserData(_i2.UserData? user) => (super.noSuchMethod(
        Invocation.method(
          #cacheUserData,
          [user],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.UserData?> getCachedUserData() => (super.noSuchMethod(
        Invocation.method(
          #getCachedUserData,
          [],
        ),
        returnValue: _i7.Future<_i2.UserData?>.value(),
        returnValueForMissingStub: _i7.Future<_i2.UserData?>.value(),
      ) as _i7.Future<_i2.UserData?>);

  @override
  _i7.Future<void> clearUserCache() => (super.noSuchMethod(
        Invocation.method(
          #clearUserCache,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateCachedGamesPlayed(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCachedGamesPlayed,
          [gameId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<String>> getMyGames() => (super.noSuchMethod(
        Invocation.method(
          #getMyGames,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<List<String>> getCachedGamesPlayed() => (super.noSuchMethod(
        Invocation.method(
          #getCachedGamesPlayed,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<List<String>> getCachedClasses({required String? type}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedClasses,
          [],
          {#type: type},
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> createGame({
    required String? uid,
    required String? gameId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGame,
          [],
          {
            #uid: uid,
            #gameId: gameId,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [GameCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameCacheService extends _i1.Mock implements _i12.GameCacheService {
  @override
  _i7.Future<void> cacheGameData(_i3.GameData? gameData) => (super.noSuchMethod(
        Invocation.method(
          #cacheGameData,
          [gameData],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.GameData?> getCachedGameData(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedGameData,
          [gameId],
        ),
        returnValue: _i7.Future<_i3.GameData?>.value(),
        returnValueForMissingStub: _i7.Future<_i3.GameData?>.value(),
      ) as _i7.Future<_i3.GameData?>);

  @override
  _i7.Future<List<String>> getCachedGameIds() => (super.noSuchMethod(
        Invocation.method(
          #getCachedGameIds,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateGamePublicStatus({
    required String? gameId,
    required bool? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGamePublicStatus,
          [],
          {
            #gameId: gameId,
            #status: status,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [SubjectCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubjectCacheService extends _i1.Mock
    implements _i13.SubjectCacheService {
  @override
  _i7.Future<void> cacheSubjectData(_i4.SubjectData? subjectData) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSubjectData,
          [subjectData],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i4.SubjectData?> getCachedSubjectData(String? subjectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedSubjectData,
          [subjectId],
        ),
        returnValue: _i7.Future<_i4.SubjectData?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.SubjectData?>.value(),
      ) as _i7.Future<_i4.SubjectData?>);

  @override
  _i7.Future<List<String>> getCachedSubjectIds() => (super.noSuchMethod(
        Invocation.method(
          #getCachedSubjectIds,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> deleteSubject({required String? subjectId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubject,
          [],
          {#subjectId: subjectId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearSubjectCache() => (super.noSuchMethod(
        Invocation.method(
          #clearSubjectCache,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [AssignmentCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssignmentCacheService extends _i1.Mock
    implements _i14.AssignmentCacheService {
  @override
  _i7.Future<void> cacheAssignmentData(_i5.AssignmentData? assignmentData) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAssignmentData,
          [assignmentData],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i5.AssignmentData?> getCachedAssignmentData(
          String? assignmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAssignmentData,
          [assignmentId],
        ),
        returnValue: _i7.Future<_i5.AssignmentData?>.value(),
        returnValueForMissingStub: _i7.Future<_i5.AssignmentData?>.value(),
      ) as _i7.Future<_i5.AssignmentData?>);

  @override
  _i7.Future<List<String>> getCachedAssignmentIds() => (super.noSuchMethod(
        Invocation.method(
          #getCachedAssignmentIds,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> deleteAssignment({required String? assignmentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAssignment,
          [],
          {#assignmentId: assignmentId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearAssignmentCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAssignmentCache,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
